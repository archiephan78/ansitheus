---
haproxy_version: "lts-alpine"
haproxy_container_name: "haproxy"
haproxy_docker_namespace: "{{ docker_namespace if docker_namespace else '' }}"
haproxy_image: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ haproxy_docker_namespace ~ '/' if haproxy_docker_namespace else '' }}haproxy:{{ haproxy_version }}"
haproxy_docker_log_driver: "{{ docker_log_driver }}"
haproxy_docker_log_opts: "{{ docker_log_opts }}"
# Docker resource limit
haproxy_docker_memory_limit: "{{ docker_memory_limit }}"
haproxy_docker_memory_swap_limit: "{{ docker_memory_swap_limit }}"
haproxy_docker_cpus_limit: "{{ docker_cpus_limit }}"

haproxy_config_dir: "{{ ansitheus_config_dir }}/haproxy/"
set_sysctl: "yes"
haproxy_max_connections: 10000
haproxy_client_timeout: "1m"
haproxy_server_timeout: "1m"
haproxy_check_timeout: "10s"
haproxy_connect_timeout: "10s"
haproxy_balance_algorithm: "roundrobin"
haproxy_http_reuse: "safe"

keepalived_traffic_mode: "multicast"
keepalived_config_dir: "{{ ansitheus_config_dir }}/keepalived/"
keepalived_package_name: "keepalived"
keepalived_service_name: "keepalived.service"

# Special variable to handle case, you want to only ONE Prometheus running instance at time.
prometheus_active_passive_mode: "no"

# Container constructor
# ---------------------
haproxy_services:
  haproxy:
    container_name: "{{ haproxy_container_name }}"
    group: "haproxy"
    enabled: "{{ enable_haproxy }}"
    image: "{{ haproxy_image }}"
    privileged: "no"
    network_mode: "host"
    restart_policy: "unless-stopped"
    state: "started"
    volumes:
      - "{{ haproxy_config_dir }}:/usr/local/etc/haproxy/:ro"
      - "/etc/localtime:/etc/localtime:ro"
    log_driver: "{{ haproxy_docker_log_driver }}"
    log_options: "{{ haproxy_docker_log_opts }}"
    cap_add:
      - NET_ADMIN
    memory: "{{ haproxy_docker_memory_limit }}"
    memory_swap: "{{ haproxy_docker_memory_swap_limit }}"
    cpus: "{{ haproxy_docker_cpus_limit }}"
