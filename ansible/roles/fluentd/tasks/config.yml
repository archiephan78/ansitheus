---
- name: Ensuring fluentd config directory exist
  ansible.builtin.file:
    path: "{{ fluentd_config_dir }}"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: 0755

- name: Ensuring fluentd subconfig directory exist
  ansible.builtin.file:
    path: "{{ fluentd_config_dir }}/conf.d"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: 0755

- name: Copying over the fluentd config
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ fluentd_config_dir }}/fluent.conf"
    mode: 0755
  register: fluentd_confs
  with_first_found:
    - "{{ ansitheus_custom_config_dir }}/fluentd/fluent.conf"
    - "{{ role_path }}/templates/fluent.conf.j2"
  notify:
    - Restart fluentd container

- name: Find subconfig
  local_action:
    module: find
    path: "{{ ansitheus_custom_config_dir }}/fluentd/conf.d"
    pattern: "*"
  run_once: true
  delegate_to: localhost
  register: fluentd_subconfig

- name: Copying over textfile files
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ fluentd_config_dir }}/conf.d/{{ item.path | basename }}"
    mode: 0755
  register: fluentd_subconfig_confs
  with_items: "{{ fluentd_subconfig.files }}"
  when:
    - fluentd_subconfig is defined and fluentd_subconfig.files | length > 0
  notify:
    - Restart fluentd container

- name: Recreating if not exist running containers
  community.general.docker_container:
    name: "{{ item.value.container_name }}"
    image: "{{ item.value.image }}"
    volumes: "{{ item.value.volumes }}"
    state: "{{ item.value.state }}"
    restart_policy: "{{ item.value.restart_policy }}"
    privileged: "{{ item.value.privileged }}"
    network_mode: "{{ item.value.network_mode }}"
    log_driver: "{{ item.value.log_driver }}"
    log_options: "{{ item.value.log_options }}"
    memory: "{{ item.value.memory }}"
    memory_swap: "{{ item.value.memory_swap }}"
    cpus: "{{ item.value.cpus }}"
  when:
    - inventory_hostname in groups[item.value.group]
    - item.value.enabled | bool
  with_dict: "{{ fluentd_services }}"
