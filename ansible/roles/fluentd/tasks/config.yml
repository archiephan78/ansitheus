---
- name: Ensuring config directory exist
  file:
    path: "{{ fluentd_conf }}{{ item }}"
    state: "directory"
    owner: "{{ config_owner_user }}"
    group: "{{ config_owner_group }}"
    mode: "0755"
    recurse: yes
  become: true
  with_items:
    - "/input"
    - "/output"
    - "/format"
    - "/filter"

- name: Set bashrc path
  set_fact:
    bashrc_path: "{% if ansible_os_family == 'RedHat' %}/etc/bashrc{% elif ansible_os_family == 'Debian' %}/etc/bash.bashrc{% endif %}"

- name: Export custom PROMPT_COMMAND
  lineinfile:
    path: "{{ bashrc_path }}"
    line: "export PROMPT_COMMAND='RETRN_VAL=$?;logger -p local6.debug \"[cmdlog] $(whoami) [$$]: $(history 1 | sed \"s/^[ ]*[0-9]\\+[ ]*//\" ) [$RETRN_VAL] [$(echo $SSH_CLIENT | cut -d\" \" -f1)]\"'"
    owner: "root"
    group: "root"
    mode: "0644"
  become: True

- name: Source bashrc
  shell: source {{ bashrc_path }}
  args:
    executable: /bin/bash

- name: Copying rsyslog config
  template:
    src: "rsyslog.conf.j2"
    dest: "/etc/rsyslog.conf"
    mode: 0644
  become: true

- name: Restart rsyslog service
  systemd:
    state: restarted
    name: rsyslog

- name: Create cmdlog.log file
  copy:
    content: ""
    dest: "/var/log/cmdlog.log"
    force: "no"
    owner: "root"
    group: "root"
    mode: "0644"
  become: true

- name: Copying over fluentd input config files
  template:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/input/{{ item | basename | regex_replace('.j2$', '') }}"
    mode: "0644"
  register: fluentd_input
  become: true
  with_fileglob:
    - ../templates/conf/input/*.j2
  notify:
    - Restart fluentd container

- name: Copying over fluentd filter config files
  template:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/filter/{{ item | basename | regex_replace('.j2$', '') }}"
    mode: "0644"
  register: fluentd_filter
  become: true
  with_fileglob:
    - ../templates/conf/filter/*.j2
  notify:
    - Restart fluentd container

- name: Copying over fluentd format config files
  template:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/format/{{ item | basename | regex_replace('.j2$', '') }}"
    mode: "0644"
  register: fluentd_format
  become: true
  with_fileglob:
    - ../templates/conf/format/*.j2
  notify:
    - Restart fluentd container

- name: Copying over fluentd output config files
  template:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/output/{{ item | basename | regex_replace('.j2$', '') }}"
    mode: "0644"
  register: fluentd_output
  become: true
  with_fileglob:
    - ../templates/conf/output/*.j2
  notify:
    - Restart fluentd container

- name: Copying over custom fluentd input config files
  copy:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/input/{{ item | basename }}"
  with_fileglob:
    - "{{ ansitheus_custom_conf }}/fluentd/input/*.conf"
  register: fluentd_input_custom
  notify:
    - Restart fluentd container

- name: Copying over custom fluentd filter config files
  copy:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/filter/{{ item | basename }}"
  with_fileglob:
    - "{{ ansitheus_custom_conf }}/fluentd/filter/*.conf"
  register: fluentd_filter_custom
  notify:
    - Restart fluentd container

- name: Copying over custom fluentd format config files
  copy:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/format/{{ item | basename }}"
  with_fileglob:
    - "{{ ansitheus_custom_conf }}/fluentd/format/*.conf"
  register: fluentd_format_conf
  notify:
    - Restart fluentd container

- name: Copying over custom fluentd output config files
  copy:
    src: "{{ item }}"
    dest: "{{ fluentd_conf }}/output/{{ item | basename }}"
  with_fileglob:
    - "{{ ansitheus_custom_conf }}/fluentd/output/*.conf"
  register: fluentd_output_custom
  notify:
    - Restart fluentd container

- name: Copying over fluent.conf
  template:
    src: "fluent.conf.j2"
    dest: "{{ fluentd_conf }}/fluent.conf"
    mode: "0644"
  register: fluentd_td_agent
  notify:
    - Restart fluentd container

- name: Check fluentd containers
  become: true
  docker_container:
    name: "{{ item.value.container_name }}"
    image: "{{ item.value.image }}"
    volumes: "{{ item.value.volumes }}"
    state: "{{ item.value.state }}"
    restart_policy: "{{ item.value.restart_policy }}"
    privileged: "{{ item.value.privileged }}"
    network_mode: "{{ item.value.network_mode }}"
  with_dict: "{{ fluentd_services }}"
